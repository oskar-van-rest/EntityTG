module layout-preservation/construct-initial-list-structure

imports
  layout-preservation/origin-tracking

rules
  
  /**
   * Finds the origin-separation given either:
   *   - a list with zero or one element(s)
   *   - an element of a list with one element
   *
   * The separation is constructed by pretty-printing a dummy element.
   * @some-elem can be any element such that placing it in the list that
   * we want to find the separation of, would not result in a mall-
   * formed AST.
   */
  origin-separation(pp|some-elem):
  elemOrList -> separation
    where
    	list := <is-list + get-parent> elemOrList;
    	<leq> (<length> list, 1)
    with
      dummy := <get-parent; alltd(dummyfy(|list, some-elem))> list;
      dummy-text := <pp> dummy;
      elem-text := <pp> some-elem;
      trimmed := <split-before; ?(_, <id>)> (dummy-text, elem-text);
      trimmed' := <split-after; ?(_, <id>)> (trimmed, elem-text);
      separation := <split-before; ?(<id>, _)> (trimmed', elem-text);
      not ( <is-substring(!elem-text)> separation )
  
  // Replace the right subterm of the dummy with a list containing two
  // duplicates of new-elem.
  dummyfy(|list, new-elem) = 
  	is-list; origin-offset; ?offset; !list; origin-offset; ?offset;
  	![new-elem, new-elem]

  // Make sure that other subterms of the dummy don't hold new-elem too.
  dummyfy(|list, new-elem) =
  	is-list; origin-offset; ?offset; !list; origin-offset; not ( ?offset );
  	![]
  
rules  
  
  get-parent = prim("SSL_EXT_get_parent", <id>)